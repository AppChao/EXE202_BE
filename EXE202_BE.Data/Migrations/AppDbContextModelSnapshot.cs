// <auto-generated />
using System;
using EXE202_BE.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EXE202_BE.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EXE202_BE.Data.Models.ActivityLevels", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LevelId"));

                    b.Property<string>("LevelDescription")
                        .HasColumnType("text");

                    b.Property<string>("LevelName")
                        .HasColumnType("text");

                    b.HasKey("LevelId");

                    b.ToTable("ActivityLevels");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Allergies", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<int>("UPId")
                        .HasColumnType("integer");

                    b.Property<int?>("IngredientsIngredientId")
                        .HasColumnType("integer");

                    b.HasKey("IngredientId", "UPId");

                    b.HasIndex("IngredientsIngredientId");

                    b.HasIndex("UPId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.CookingSkills", b =>
                {
                    b.Property<int>("CookingSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CookingSkillId"));

                    b.Property<string>("CookingSkillName")
                        .HasColumnType("text");

                    b.Property<string>("DifficultyValue")
                        .HasColumnType("text");

                    b.HasKey("CookingSkillId");

                    b.ToTable("CookingSkills");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Cuisines", b =>
                {
                    b.Property<int>("CuisineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CuisineId"));

                    b.Property<string>("Nation")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.HasKey("CuisineId");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Devices", b =>
                {
                    b.Property<string>("DeviceToken")
                        .HasColumnType("text");

                    b.Property<string>("Platform")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DeviceToken");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Goals", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GoalId"));

                    b.Property<string>("GoalName")
                        .HasColumnType("text");

                    b.HasKey("GoalId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.HealthConditions", b =>
                {
                    b.Property<int>("HealthConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HealthConditionId"));

                    b.Property<string>("HealthConditionName")
                        .HasColumnType("text");

                    b.HasKey("HealthConditionId");

                    b.ToTable("HealthConditions");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.HealthTags", b =>
                {
                    b.Property<int>("HealthTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HealthTagId"));

                    b.Property<string>("HealthTagName")
                        .HasColumnType("text");

                    b.HasKey("HealthTagId");

                    b.ToTable("HealthTags");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.IngredientTypes", b =>
                {
                    b.Property<int>("IngredientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IngredientTypeId"));

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("IngredientTypeId");

                    b.ToTable("IngredientTypes");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Ingredients", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IngredientId"));

                    b.Property<double?>("CaloriesPer100g")
                        .HasColumnType("double precision");

                    b.Property<string>("DefaultUnit")
                        .HasColumnType("text");

                    b.Property<double?>("GramPerUnit")
                        .HasColumnType("double precision");

                    b.Property<string>("IngredientName")
                        .HasColumnType("text");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("integer");

                    b.HasKey("IngredientId");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.LoseWeightSpeed", b =>
                {
                    b.Property<int>("SpeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpeedId"));

                    b.Property<string>("SpeedName")
                        .HasColumnType("text");

                    b.Property<string>("TimeToReachGoal")
                        .HasColumnType("text");

                    b.HasKey("SpeedId");

                    b.ToTable("LoseWeightSpeed");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.MealCatagories", b =>
                {
                    b.Property<int>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MealId"));

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MealId");

                    b.ToTable("MealCatagories");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.MealScheduled", b =>
                {
                    b.Property<int>("UPId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BreakfastTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DinnerTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LunchTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UPId");

                    b.ToTable("MealScheduled");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.ModifyIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.NotificationUsers", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Notifications", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalHealthConditions", b =>
                {
                    b.Property<int>("UPId")
                        .HasColumnType("integer");

                    b.Property<int>("HealthConditionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ActivityLevelsLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("UPId", "HealthConditionId");

                    b.HasIndex("ActivityLevelsLevelId");

                    b.HasIndex("HealthConditionId");

                    b.ToTable("PersonalHealthConditions");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalUserCookingSkills", b =>
                {
                    b.Property<int>("UPId")
                        .HasColumnType("integer");

                    b.Property<int>("CookingSkillId")
                        .HasColumnType("integer");

                    b.HasKey("UPId", "CookingSkillId");

                    b.HasIndex("CookingSkillId");

                    b.ToTable("PersonalUserCookingSkills");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalUserProblem", b =>
                {
                    b.Property<int>("UPId")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemId")
                        .HasColumnType("integer");

                    b.HasKey("UPId", "ProblemId");

                    b.HasIndex("ProblemId");

                    b.ToTable("PersonalUserProblem");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.RecipeHealthTags", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<int>("HealthTagId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("RecipeId", "HealthTagId");

                    b.HasIndex("HealthTagId");

                    b.ToTable("RecipeHealthTags");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.RecipeMealTypes", b =>
                {
                    b.Property<int>("MealId")
                        .HasColumnType("integer");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("MealId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeMealTypes");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Recipes", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecipeId"));

                    b.Property<int?>("CuisineId")
                        .HasColumnType("integer");

                    b.Property<int?>("DefaultServing")
                        .HasColumnType("integer");

                    b.Property<double>("DifficultyEstimation")
                        .HasColumnType("double precision");

                    b.Property<string>("InstructionVideoLink")
                        .HasColumnType("text");

                    b.Property<string>("Meals")
                        .HasColumnType("text");

                    b.Property<string>("RecipeName")
                        .HasColumnType("text");

                    b.Property<string>("RecipeSteps")
                        .HasColumnType("text");

                    b.Property<int>("TimeEstimation")
                        .HasColumnType("integer");

                    b.HasKey("RecipeId");

                    b.HasIndex("CuisineId");

                    b.ToTable("Recipes", t =>
                        {
                            t.HasCheckConstraint("CK_Recipes_Difficulty_Rating", "\"DifficultyEstimation\" BETWEEN 1 AND 5");

                            t.HasCheckConstraint("CK_Recipes_Meals", "\"Meals\" IN ('breakfast', 'lunch', 'dinner', 'snack')");
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Servings", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<string>("Ammount")
                        .HasColumnType("text");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Servings");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Subcriptions", b =>
                {
                    b.Property<int>("SubcriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubcriptionId"));

                    b.Property<string>("SubcriptionInfor")
                        .HasColumnType("text");

                    b.Property<string>("SubcriptionName")
                        .HasColumnType("text");

                    b.HasKey("SubcriptionId");

                    b.ToTable("Subcriptions");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserExperiences", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExperienceId"));

                    b.Property<string>("ExperienceName")
                        .HasColumnType("text");

                    b.HasKey("ExperienceId");

                    b.ToTable("UserExperiences");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserProblem", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProblemId"));

                    b.Property<string>("ProblemName")
                        .HasColumnType("text");

                    b.HasKey("ProblemId");

                    b.ToTable("UserProblem");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserProfiles", b =>
                {
                    b.Property<int>("UPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UPId"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("ExperienceId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<int?>("GoalId")
                        .HasColumnType("integer");

                    b.Property<double?>("GoalWeight")
                        .HasColumnType("double precision");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<int?>("LevelId")
                        .HasColumnType("integer");

                    b.Property<int?>("SpeedId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubcriptionId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPicture")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("UPId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("GoalId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SpeedId");

                    b.HasIndex("SubcriptionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles", t =>
                        {
                            t.HasCheckConstraint("CK_UserProfiles_Gender", "\"Gender\" IN ('Male', 'Female', 'Other')");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Allergies", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.Ingredients", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.Ingredients", null)
                        .WithMany("Allergies")
                        .HasForeignKey("IngredientsIngredientId");

                    b.HasOne("EXE202_BE.Data.Models.UserProfiles", "UserProfile")
                        .WithMany("Allergies")
                        .HasForeignKey("UPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Devices", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Ingredients", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.IngredientTypes", "IngredientType")
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.MealScheduled", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.UserProfiles", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.NotificationUsers", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.Notifications", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalHealthConditions", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.ActivityLevels", null)
                        .WithMany("PersonalHealthConditions")
                        .HasForeignKey("ActivityLevelsLevelId");

                    b.HasOne("EXE202_BE.Data.Models.HealthConditions", "HealthCondition")
                        .WithMany()
                        .HasForeignKey("HealthConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.UserProfiles", "UserProfile")
                        .WithMany("PersonalHealthConditions")
                        .HasForeignKey("UPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCondition");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalUserCookingSkills", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.CookingSkills", "CookingSkill")
                        .WithMany("PersonalUserCookingSkills")
                        .HasForeignKey("CookingSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.UserProfiles", "UserProfile")
                        .WithMany("PersonalUserCookingSkills")
                        .HasForeignKey("UPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CookingSkill");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalUserProblem", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.UserProblem", "UserProblem")
                        .WithMany("PersonalUserProblems")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.UserProfiles", "UserProfile")
                        .WithMany("PersonalUserProblems")
                        .HasForeignKey("UPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProblem");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.RecipeHealthTags", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.HealthTags", "HealthTag")
                        .WithMany("RecipeHealthTags")
                        .HasForeignKey("HealthTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.Recipes", "Recipe")
                        .WithMany("RecipeHealthTags")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthTag");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.RecipeMealTypes", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.MealCatagories", "MealCatagorie")
                        .WithMany("RecipeMealTypes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.Recipes", "Recipe")
                        .WithMany("RecipeMealTypes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealCatagorie");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Recipes", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.Cuisines", "Cuisine")
                        .WithMany("Recipes")
                        .HasForeignKey("CuisineId");

                    b.Navigation("Cuisine");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Servings", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.Ingredients", "Ingredient")
                        .WithMany("Servings")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.Recipes", "Recipe")
                        .WithMany("Servings")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserProfiles", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.UserExperiences", "UserExperience")
                        .WithMany("UserProfiles")
                        .HasForeignKey("ExperienceId");

                    b.HasOne("EXE202_BE.Data.Models.Goals", "Goal")
                        .WithMany("UserProfiles")
                        .HasForeignKey("GoalId");

                    b.HasOne("EXE202_BE.Data.Models.ActivityLevels", "ActivityLevel")
                        .WithMany("UserProfiles")
                        .HasForeignKey("LevelId");

                    b.HasOne("EXE202_BE.Data.Models.LoseWeightSpeed", "LoseWeightSpeed")
                        .WithMany("UserProfiles")
                        .HasForeignKey("SpeedId");

                    b.HasOne("EXE202_BE.Data.Models.Subcriptions", "Subcription")
                        .WithMany()
                        .HasForeignKey("SubcriptionId");

                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("EXE202_BE.Data.Models.UserProfiles", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityLevel");

                    b.Navigation("Goal");

                    b.Navigation("LoseWeightSpeed");

                    b.Navigation("Subcription");

                    b.Navigation("User");

                    b.Navigation("UserExperience");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.ActivityLevels", b =>
                {
                    b.Navigation("PersonalHealthConditions");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.CookingSkills", b =>
                {
                    b.Navigation("PersonalUserCookingSkills");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Cuisines", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Goals", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.HealthTags", b =>
                {
                    b.Navigation("RecipeHealthTags");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.IngredientTypes", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Ingredients", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Servings");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.LoseWeightSpeed", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.MealCatagories", b =>
                {
                    b.Navigation("RecipeMealTypes");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Notifications", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Recipes", b =>
                {
                    b.Navigation("RecipeHealthTags");

                    b.Navigation("RecipeMealTypes");

                    b.Navigation("Servings");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserExperiences", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserProblem", b =>
                {
                    b.Navigation("PersonalUserProblems");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserProfiles", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("PersonalHealthConditions");

                    b.Navigation("PersonalUserCookingSkills");

                    b.Navigation("PersonalUserProblems");
                });
#pragma warning restore 612, 618
        }
    }
}
