// <auto-generated />
using System;
using EXE202_BE.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EXE202_BE.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EXE202_BE.Data.Models.ActivityLevels", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LevelId"));

                    b.Property<string>("LevelDescription")
                        .HasColumnType("text");

                    b.Property<string>("LevelName")
                        .HasColumnType("text");

                    b.HasKey("LevelId");

                    b.ToTable("ActivityLevels");

                    b.HasData(
                        new
                        {
                            LevelId = 1,
                            LevelDescription = "Sedentary lifestyle, no exercise",
                            LevelName = "Low Activity"
                        },
                        new
                        {
                            LevelId = 2,
                            LevelDescription = "Light exercise 1-3 days per week",
                            LevelName = "Medium Activity"
                        },
                        new
                        {
                            LevelId = 3,
                            LevelDescription = "Intense exercise 3-5 days per week",
                            LevelName = "High Activity"
                        },
                        new
                        {
                            LevelId = 4,
                            LevelDescription = "Daily exercise or physical job",
                            LevelName = "Very High Activity"
                        },
                        new
                        {
                            LevelId = 5,
                            LevelDescription = "Athletes very hard physical job",
                            LevelName = "Extra Activity"
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Allergies", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<int>("UPId")
                        .HasColumnType("integer");

                    b.Property<int?>("IngredientsIngredientId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesUPId")
                        .HasColumnType("integer");

                    b.HasKey("IngredientId", "UPId");

                    b.HasIndex("IngredientsIngredientId");

                    b.HasIndex("UPId");

                    b.HasIndex("UserProfilesUPId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.CookingSkills", b =>
                {
                    b.Property<int>("CookingSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CookingSkillId"));

                    b.Property<string>("CookingSkillName")
                        .HasColumnType("text");

                    b.Property<string>("DifficultyValue")
                        .HasColumnType("text");

                    b.HasKey("CookingSkillId");

                    b.ToTable("CookingSkills");

                    b.HasData(
                        new
                        {
                            CookingSkillId = 1,
                            CookingSkillName = "Novice",
                            DifficultyValue = "1"
                        },
                        new
                        {
                            CookingSkillId = 2,
                            CookingSkillName = "Basic",
                            DifficultyValue = "2"
                        },
                        new
                        {
                            CookingSkillId = 3,
                            CookingSkillName = "Intermediate",
                            DifficultyValue = "3"
                        },
                        new
                        {
                            CookingSkillId = 4,
                            CookingSkillName = "Advanced",
                            DifficultyValue = "4"
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Cuisines", b =>
                {
                    b.Property<int>("CuisineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CuisineId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Nation")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.HasKey("CuisineId");

                    b.ToTable("Cuisines");

                    b.HasData(
                        new
                        {
                            CuisineId = 1,
                            Description = "Taste profile: Light, delicate, mildly seasoned, not too sweet, emphasizing subtlety and balance.\n\nCommonly used ingredients: Shallots, garlic, fish sauce, fermented shrimp paste (mắm tôm), vinegar, rice wine vinegar (dấm bỗng).\n\nRepresentative dishes:\n\nHanoi Beef Pho (Phở bò Hà Nội)\n\nBun Thang (Bún thang)\n\nLa Vong Grilled Fish (Chả cá Lã Vọng)\n\nFried Spring Rolls (Nem rán / Chả giò)\n\nCrab Noodle Soup (Bún riêu cua)",
                            Nation = "Viet Nam",
                            Region = "Northern"
                        },
                        new
                        {
                            CuisineId = 2,
                            Description = "Taste profile: Bold, spicy, and saltier than other regions.\n\nCommonly used ingredients: Chili, lemongrass, fermented anchovy paste (mắm ruốc), fermented fish sauce (mắm nêm), turmeric, pepper.\n\nRepresentative dishes:\n\nHue Spicy Beef Noodle Soup (Bún bò Huế)\n\nQuang-style Noodles (Mì Quảng)\n\nBaby Clam Rice (Cơm hến)\n\nSteamed Savory Rice Cakes (Bánh bèo, Bánh nậm, Bánh lọc)\n\nGrilled Pork Skewers & Fermented Pork (Nem lụi, Tré)\n\nHue is known for its royal cuisine, with dishes that are often elaborate and beautifully presented.",
                            Nation = "Viet Nam",
                            Region = "Central"
                        },
                        new
                        {
                            CuisineId = 3,
                            Description = "Taste profile: Sweeter, richer flavors, often using coconut milk and sugar-based broths.\n\nCommonly used ingredients: Sugar, coconut milk, garlic, mild chili, aromatic herbs.\n\nRepresentative dishes:\n\nPhnom Penh-style Noodle Soup (Hủ tiếu Nam Vang)\n\nFermented Fish Noodle Soup (Bún mắm)\n\nBroken Rice with Grilled Pork (Cơm tấm)\n\nFresh Spring Rolls (Gỏi cuốn)\n\nCaramelized Braised Fish in Clay Pot (Cá kho tộ)\n\nSour Soup & Fermented Fish Hotpot (Canh chua, Lẩu mắm)",
                            Nation = "Viet Nam",
                            Region = "Southern"
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Devices", b =>
                {
                    b.Property<string>("DeviceToken")
                        .HasColumnType("text");

                    b.Property<string>("Platform")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DeviceToken");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Goals", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GoalId"));

                    b.Property<string>("GoalName")
                        .HasColumnType("text");

                    b.HasKey("GoalId");

                    b.ToTable("Goals");

                    b.HasData(
                        new
                        {
                            GoalId = 1,
                            GoalName = "Eat healthy"
                        },
                        new
                        {
                            GoalId = 2,
                            GoalName = "Learn how to cook"
                        },
                        new
                        {
                            GoalId = 3,
                            GoalName = "Lose weight"
                        },
                        new
                        {
                            GoalId = 4,
                            GoalName = "Gain weight"
                        },
                        new
                        {
                            GoalId = 5,
                            GoalName = "Try new recipes"
                        },
                        new
                        {
                            GoalId = 6,
                            GoalName = "Stick to my diet"
                        },
                        new
                        {
                            GoalId = 7,
                            GoalName = "Build muscle"
                        },
                        new
                        {
                            GoalId = 8,
                            GoalName = "Save time"
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.HealthConditions", b =>
                {
                    b.Property<int>("HealthConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HealthConditionId"));

                    b.Property<string>("BriefDescription")
                        .HasColumnType("text");

                    b.Property<string>("HealthConditionName")
                        .HasColumnType("text");

                    b.Property<string>("HealthConditionType")
                        .HasColumnType("text");

                    b.HasKey("HealthConditionId");

                    b.ToTable("HealthConditions", t =>
                        {
                            t.HasCheckConstraint("CK_HealthConditions_Types", "\"HealthConditionType\" IN ('Metabolic & Endocrine Disorders', 'Cardiovascular & Blood Pressure Disorders', 'Digestive & Absorption Disorders', 'Liver & Kidney Disorders', 'Immune & Allergy Disorders', 'Others – Skin, Bones, Mental Health')");
                        });

                    b.HasData(
                        new
                        {
                            HealthConditionId = 1,
                            BriefDescription = "Caused by insulin disorders – requires control of sugar and carbs",
                            HealthConditionName = "Diabetes Type 1",
                            HealthConditionType = "Metabolic & Endocrine Disorders"
                        },
                        new
                        {
                            HealthConditionId = 2,
                            BriefDescription = "Caused by insulin disorders – requires control of sugar and carbs",
                            HealthConditionName = "Diabetes Type 2",
                            HealthConditionType = "Metabolic & Endocrine Disorders"
                        },
                        new
                        {
                            HealthConditionId = 3,
                            BriefDescription = "A warning stage before diabetes",
                            HealthConditionName = "Prediabetes",
                            HealthConditionType = "Metabolic & Endocrine Disorders"
                        },
                        new
                        {
                            HealthConditionId = 4,
                            BriefDescription = "High LDL, triglycerides; low HDL",
                            HealthConditionName = "Dyslipidemia",
                            HealthConditionType = "Metabolic & Endocrine Disorders"
                        },
                        new
                        {
                            HealthConditionId = 5,
                            BriefDescription = "High uric acid causing joint inflammation – avoid purines",
                            HealthConditionName = "Hyperuricemia / Gout",
                            HealthConditionType = "Metabolic & Endocrine Disorders"
                        },
                        new
                        {
                            HealthConditionId = 6,
                            BriefDescription = "Excess calories – needs low-energy diet",
                            HealthConditionName = "Overweight / Obesity",
                            HealthConditionType = "Metabolic & Endocrine Disorders"
                        },
                        new
                        {
                            HealthConditionId = 7,
                            BriefDescription = "Includes abdominal obesity, high blood pressure, high blood sugar, high blood lipids",
                            HealthConditionName = "Metabolic Syndrome",
                            HealthConditionType = "Metabolic & Endocrine Disorders"
                        },
                        new
                        {
                            HealthConditionId = 8,
                            BriefDescription = "Low blood sugar – requires proper carb distribution",
                            HealthConditionName = "Hypoglycemia",
                            HealthConditionType = "Metabolic & Endocrine Disorders"
                        },
                        new
                        {
                            HealthConditionId = 9,
                            BriefDescription = "High blood pressure – reduce salt and fat",
                            HealthConditionName = "Hypertension",
                            HealthConditionType = "Cardiovascular & Blood Pressure Disorders"
                        },
                        new
                        {
                            HealthConditionId = 10,
                            BriefDescription = "Narrowed heart vessels due to fat – requires low-fat diet",
                            HealthConditionName = "Coronary Heart Disease",
                            HealthConditionType = "Cardiovascular & Blood Pressure Disorders"
                        },
                        new
                        {
                            HealthConditionId = 11,
                            BriefDescription = "Reduced heart pumping function – limit salt and fluids",
                            HealthConditionName = "Heart Failure",
                            HealthConditionType = "Cardiovascular & Blood Pressure Disorders"
                        },
                        new
                        {
                            HealthConditionId = 12,
                            BriefDescription = "Caused by cholesterol buildup",
                            HealthConditionName = "Atherosclerosis",
                            HealthConditionType = "Cardiovascular & Blood Pressure Disorders"
                        },
                        new
                        {
                            HealthConditionId = 13,
                            BriefDescription = "May be related to potassium, sodium, and magnesium levels",
                            HealthConditionName = "Arrhythmia",
                            HealthConditionType = "Cardiovascular & Blood Pressure Disorders"
                        },
                        new
                        {
                            HealthConditionId = 14,
                            BriefDescription = "Avoid acidic, spicy, and fatty foods",
                            HealthConditionName = "Gastroesophageal Reflux Disease (GERD)",
                            HealthConditionType = "Digestive & Absorption Disorders"
                        },
                        new
                        {
                            HealthConditionId = 15,
                            BriefDescription = "Avoid spicy, sour foods, and alcohol",
                            HealthConditionName = "Gastric and Duodenal Ulcers",
                            HealthConditionType = "Digestive & Absorption Disorders"
                        },
                        new
                        {
                            HealthConditionId = 16,
                            BriefDescription = "Requires low-FODMAP diet",
                            HealthConditionName = "Irritable Bowel Syndrome (IBS)",
                            HealthConditionType = "Digestive & Absorption Disorders"
                        },
                        new
                        {
                            HealthConditionId = 17,
                            BriefDescription = "Caused by low fiber or water intake",
                            HealthConditionName = "Chronic Constipation",
                            HealthConditionType = "Digestive & Absorption Disorders"
                        },
                        new
                        {
                            HealthConditionId = 18,
                            BriefDescription = "May be due to bacteria or incorrect diet",
                            HealthConditionName = "Prolonged Diarrhea",
                            HealthConditionType = "Digestive & Absorption Disorders"
                        },
                        new
                        {
                            HealthConditionId = 19,
                            BriefDescription = "Gluten allergy – requires gluten-free diet",
                            HealthConditionName = "Celiac Disease / Gluten Allergy",
                            HealthConditionType = "Digestive & Absorption Disorders"
                        },
                        new
                        {
                            HealthConditionId = 20,
                            BriefDescription = "Milk sugar allergy – avoid dairy products",
                            HealthConditionName = "Lactose Intolerance",
                            HealthConditionType = "Digestive & Absorption Disorders"
                        },
                        new
                        {
                            HealthConditionId = 21,
                            BriefDescription = "Caused by excess fat – needs low-fat, low-sugar diet",
                            HealthConditionName = "Fatty Liver",
                            HealthConditionType = "Liver & Kidney Disorders"
                        },
                        new
                        {
                            HealthConditionId = 22,
                            BriefDescription = "Weak liver – reduce protein and salt",
                            HealthConditionName = "Hepatitis B/C, Cirrhosis",
                            HealthConditionType = "Liver & Kidney Disorders"
                        },
                        new
                        {
                            HealthConditionId = 23,
                            BriefDescription = "Restrict protein, sodium, potassium, and phosphorus",
                            HealthConditionName = "Chronic Kidney Disease",
                            HealthConditionType = "Liver & Kidney Disorders"
                        },
                        new
                        {
                            HealthConditionId = 24,
                            BriefDescription = "Avoid oxalates, purines, and sodium depending on stone type",
                            HealthConditionName = "Kidney Stones",
                            HealthConditionType = "Liver & Kidney Disorders"
                        },
                        new
                        {
                            HealthConditionId = 25,
                            BriefDescription = "Allergic to peanuts, eggs, milk, seafood, etc.",
                            HealthConditionName = "Food Allergies",
                            HealthConditionType = "Immune & Allergy Disorders"
                        },
                        new
                        {
                            HealthConditionId = 26,
                            BriefDescription = "Triggered by certain foods",
                            HealthConditionName = "Asthma related to food allergies",
                            HealthConditionType = "Immune & Allergy Disorders"
                        },
                        new
                        {
                            HealthConditionId = 27,
                            BriefDescription = "Avoid fats and inflammatory foods",
                            HealthConditionName = "Lupus",
                            HealthConditionType = "Immune & Allergy Disorders"
                        },
                        new
                        {
                            HealthConditionId = 28,
                            BriefDescription = "Requires nutrient-rich, immune-boosting foods",
                            HealthConditionName = "Immunodeficiency / Post-surgery / Cancer",
                            HealthConditionType = "Immune & Allergy Disorders"
                        },
                        new
                        {
                            HealthConditionId = 29,
                            BriefDescription = "Calcium and vitamin D deficiency",
                            HealthConditionName = "Osteoporosis",
                            HealthConditionType = "Others – Skin, Bones, Mental Health"
                        },
                        new
                        {
                            HealthConditionId = 30,
                            BriefDescription = "May be linked to zinc, vitamins A and E deficiency",
                            HealthConditionName = "Skin Inflammation, Acne",
                            HealthConditionType = "Others – Skin, Bones, Mental Health"
                        },
                        new
                        {
                            HealthConditionId = 31,
                            BriefDescription = "Need foods rich in tryptophan, B6, and magnesium",
                            HealthConditionName = "Mild Depression, Chronic Stress",
                            HealthConditionType = "Others – Skin, Bones, Mental Health"
                        },
                        new
                        {
                            HealthConditionId = 32,
                            BriefDescription = "May benefit from melatonin-boosting diet",
                            HealthConditionName = "Insomnia",
                            HealthConditionType = "Others – Skin, Bones, Mental Health"
                        },
                        new
                        {
                            HealthConditionId = 33,
                            BriefDescription = "Requires iron-rich and vitamin C-rich foods",
                            HealthConditionName = "Iron-deficiency Anemia",
                            HealthConditionType = "Others – Skin, Bones, Mental Health"
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.HealthTagConditions", b =>
                {
                    b.Property<int>("HealthConditionId")
                        .HasColumnType("integer");

                    b.Property<int>("HealthTagId")
                        .HasColumnType("integer");

                    b.HasKey("HealthConditionId", "HealthTagId");

                    b.HasIndex("HealthTagId");

                    b.ToTable("HealthTagConditions");

                    b.HasData(
                        new
                        {
                            HealthConditionId = 1,
                            HealthTagId = 4
                        },
                        new
                        {
                            HealthConditionId = 1,
                            HealthTagId = 9
                        },
                        new
                        {
                            HealthConditionId = 1,
                            HealthTagId = 1
                        },
                        new
                        {
                            HealthConditionId = 2,
                            HealthTagId = 4
                        },
                        new
                        {
                            HealthConditionId = 2,
                            HealthTagId = 9
                        },
                        new
                        {
                            HealthConditionId = 2,
                            HealthTagId = 1
                        },
                        new
                        {
                            HealthConditionId = 2,
                            HealthTagId = 2
                        },
                        new
                        {
                            HealthConditionId = 2,
                            HealthTagId = 7
                        },
                        new
                        {
                            HealthConditionId = 3,
                            HealthTagId = 9
                        },
                        new
                        {
                            HealthConditionId = 3,
                            HealthTagId = 4
                        },
                        new
                        {
                            HealthConditionId = 3,
                            HealthTagId = 1
                        },
                        new
                        {
                            HealthConditionId = 4,
                            HealthTagId = 6
                        },
                        new
                        {
                            HealthConditionId = 4,
                            HealthTagId = 18
                        },
                        new
                        {
                            HealthConditionId = 4,
                            HealthTagId = 2
                        },
                        new
                        {
                            HealthConditionId = 4,
                            HealthTagId = 10
                        },
                        new
                        {
                            HealthConditionId = 5,
                            HealthTagId = 13
                        },
                        new
                        {
                            HealthConditionId = 5,
                            HealthTagId = 2
                        },
                        new
                        {
                            HealthConditionId = 5,
                            HealthTagId = 22
                        },
                        new
                        {
                            HealthConditionId = 6,
                            HealthTagId = 7
                        },
                        new
                        {
                            HealthConditionId = 6,
                            HealthTagId = 1
                        },
                        new
                        {
                            HealthConditionId = 6,
                            HealthTagId = 2
                        },
                        new
                        {
                            HealthConditionId = 6,
                            HealthTagId = 3
                        },
                        new
                        {
                            HealthConditionId = 7,
                            HealthTagId = 1
                        },
                        new
                        {
                            HealthConditionId = 7,
                            HealthTagId = 2
                        },
                        new
                        {
                            HealthConditionId = 7,
                            HealthTagId = 5
                        },
                        new
                        {
                            HealthConditionId = 7,
                            HealthTagId = 4
                        },
                        new
                        {
                            HealthConditionId = 7,
                            HealthTagId = 7
                        },
                        new
                        {
                            HealthConditionId = 8,
                            HealthTagId = 1
                        },
                        new
                        {
                            HealthConditionId = 8,
                            HealthTagId = 3
                        },
                        new
                        {
                            HealthConditionId = 9,
                            HealthTagId = 5
                        },
                        new
                        {
                            HealthConditionId = 9,
                            HealthTagId = 17
                        },
                        new
                        {
                            HealthConditionId = 9,
                            HealthTagId = 10
                        },
                        new
                        {
                            HealthConditionId = 10,
                            HealthTagId = 2
                        },
                        new
                        {
                            HealthConditionId = 10,
                            HealthTagId = 6
                        },
                        new
                        {
                            HealthConditionId = 10,
                            HealthTagId = 10
                        },
                        new
                        {
                            HealthConditionId = 11,
                            HealthTagId = 5
                        },
                        new
                        {
                            HealthConditionId = 11,
                            HealthTagId = 10
                        },
                        new
                        {
                            HealthConditionId = 12,
                            HealthTagId = 6
                        },
                        new
                        {
                            HealthConditionId = 12,
                            HealthTagId = 18
                        },
                        new
                        {
                            HealthConditionId = 12,
                            HealthTagId = 2
                        },
                        new
                        {
                            HealthConditionId = 13,
                            HealthTagId = 5
                        },
                        new
                        {
                            HealthConditionId = 13,
                            HealthTagId = 17
                        },
                        new
                        {
                            HealthConditionId = 13,
                            HealthTagId = 10
                        },
                        new
                        {
                            HealthConditionId = 14,
                            HealthTagId = 14
                        },
                        new
                        {
                            HealthConditionId = 14,
                            HealthTagId = 15
                        },
                        new
                        {
                            HealthConditionId = 15,
                            HealthTagId = 15
                        },
                        new
                        {
                            HealthConditionId = 15,
                            HealthTagId = 14
                        },
                        new
                        {
                            HealthConditionId = 16,
                            HealthTagId = 26
                        },
                        new
                        {
                            HealthConditionId = 16,
                            HealthTagId = 15
                        },
                        new
                        {
                            HealthConditionId = 17,
                            HealthTagId = 8
                        },
                        new
                        {
                            HealthConditionId = 17,
                            HealthTagId = 16
                        },
                        new
                        {
                            HealthConditionId = 18,
                            HealthTagId = 15
                        },
                        new
                        {
                            HealthConditionId = 19,
                            HealthTagId = 19
                        },
                        new
                        {
                            HealthConditionId = 19,
                            HealthTagId = 22
                        },
                        new
                        {
                            HealthConditionId = 20,
                            HealthTagId = 20
                        },
                        new
                        {
                            HealthConditionId = 20,
                            HealthTagId = 21
                        },
                        new
                        {
                            HealthConditionId = 20,
                            HealthTagId = 22
                        },
                        new
                        {
                            HealthConditionId = 21,
                            HealthTagId = 12
                        },
                        new
                        {
                            HealthConditionId = 21,
                            HealthTagId = 2
                        },
                        new
                        {
                            HealthConditionId = 21,
                            HealthTagId = 4
                        },
                        new
                        {
                            HealthConditionId = 22,
                            HealthTagId = 12
                        },
                        new
                        {
                            HealthConditionId = 22,
                            HealthTagId = 2
                        },
                        new
                        {
                            HealthConditionId = 22,
                            HealthTagId = 11
                        },
                        new
                        {
                            HealthConditionId = 23,
                            HealthTagId = 11
                        },
                        new
                        {
                            HealthConditionId = 23,
                            HealthTagId = 5
                        },
                        new
                        {
                            HealthConditionId = 24,
                            HealthTagId = 13
                        },
                        new
                        {
                            HealthConditionId = 24,
                            HealthTagId = 5
                        },
                        new
                        {
                            HealthConditionId = 24,
                            HealthTagId = 2
                        },
                        new
                        {
                            HealthConditionId = 25,
                            HealthTagId = 22
                        },
                        new
                        {
                            HealthConditionId = 26,
                            HealthTagId = 22
                        },
                        new
                        {
                            HealthConditionId = 27,
                            HealthTagId = 23
                        },
                        new
                        {
                            HealthConditionId = 27,
                            HealthTagId = 2
                        },
                        new
                        {
                            HealthConditionId = 28,
                            HealthTagId = 27
                        },
                        new
                        {
                            HealthConditionId = 28,
                            HealthTagId = 3
                        },
                        new
                        {
                            HealthConditionId = 28,
                            HealthTagId = 23
                        },
                        new
                        {
                            HealthConditionId = 29,
                            HealthTagId = 28
                        },
                        new
                        {
                            HealthConditionId = 30,
                            HealthTagId = 29
                        },
                        new
                        {
                            HealthConditionId = 30,
                            HealthTagId = 23
                        },
                        new
                        {
                            HealthConditionId = 31,
                            HealthTagId = 31
                        },
                        new
                        {
                            HealthConditionId = 31,
                            HealthTagId = 27
                        },
                        new
                        {
                            HealthConditionId = 32,
                            HealthTagId = 31
                        },
                        new
                        {
                            HealthConditionId = 33,
                            HealthTagId = 3
                        },
                        new
                        {
                            HealthConditionId = 33,
                            HealthTagId = 30
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.HealthTags", b =>
                {
                    b.Property<int>("HealthTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HealthTagId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HealthTagName")
                        .HasColumnType("text");

                    b.HasKey("HealthTagId");

                    b.ToTable("HealthTags");

                    b.HasData(
                        new
                        {
                            HealthTagId = 1,
                            Description = "Low in carbohydrates, Applicable To People on weight loss diets, diabetics",
                            HealthTagName = "is_low_carb"
                        },
                        new
                        {
                            HealthTagId = 2,
                            Description = "Low in fat, Applicable To People with heart conditions, those losing weight",
                            HealthTagName = "is_low_fat"
                        },
                        new
                        {
                            HealthTagId = 3,
                            Description = "High in protein, Applicable To Gym-goers, people with protein deficiency",
                            HealthTagName = "is_high_protein"
                        },
                        new
                        {
                            HealthTagId = 4,
                            Description = "Low in sugar, Applicable To Diabetics, people on sugar-restricted diets",
                            HealthTagName = "is_low_sugar"
                        },
                        new
                        {
                            HealthTagId = 5,
                            Description = "Low in sodium, Applicable To People with high blood pressure, heart conditions",
                            HealthTagName = "is_low_sodium"
                        },
                        new
                        {
                            HealthTagId = 6,
                            Description = "Low in cholesterol, Applicable To People with high cholesterol, heart conditions",
                            HealthTagName = "is_low_cholesterol"
                        },
                        new
                        {
                            HealthTagId = 7,
                            Description = "Low in total calories, Applicable To Overweight individuals, people aiming for weight loss",
                            HealthTagName = "is_low_calorie"
                        },
                        new
                        {
                            HealthTagId = 8,
                            Description = "High in fiber, Applicable To People with constipation, those reducing cholesterol",
                            HealthTagName = "is_high_fiber"
                        },
                        new
                        {
                            HealthTagId = 9,
                            Description = "Suitable for diabetics, Applicable To People with diabetes or prediabetes",
                            HealthTagName = "is_diabetic_friendly"
                        },
                        new
                        {
                            HealthTagId = 10,
                            Description = "Heart-friendly, Applicable To People with heart disease, high blood pressure",
                            HealthTagName = "is_heart_healthy"
                        },
                        new
                        {
                            HealthTagId = 11,
                            Description = "Kidney-friendly, Applicable To People with chronic kidney disease or on dialysis",
                            HealthTagName = "is_kidney_friendly"
                        },
                        new
                        {
                            HealthTagId = 12,
                            Description = "Liver-friendly, Applicable To People with hepatitis, fatty liver",
                            HealthTagName = "is_liver_friendly"
                        },
                        new
                        {
                            HealthTagId = 13,
                            Description = "Does not trigger uric acid, Applicable To People with gout",
                            HealthTagName = "is_gout_safe"
                        },
                        new
                        {
                            HealthTagId = 14,
                            Description = "Does not cause acid reflux, Applicable To People with GERD",
                            HealthTagName = "is_gerd_safe"
                        },
                        new
                        {
                            HealthTagId = 15,
                            Description = "Easy to digest, Applicable To People with weak stomach, IBS",
                            HealthTagName = "is_digestive_friendly"
                        },
                        new
                        {
                            HealthTagId = 16,
                            Description = "Relieves constipation, Applicable To People with constipation",
                            HealthTagName = "is_constipation_relief"
                        },
                        new
                        {
                            HealthTagId = 17,
                            Description = "Helps regulate blood pressure, Applicable To People with hypertension",
                            HealthTagName = "is_blood_pressure_friendly"
                        },
                        new
                        {
                            HealthTagId = 18,
                            Description = "Helps control blood lipids, Applicable To People with dyslipidemia",
                            HealthTagName = "is_cholesterol_control"
                        },
                        new
                        {
                            HealthTagId = 19,
                            Description = "Gluten-free, Applicable To People with gluten allergy or celiac disease",
                            HealthTagName = "is_gluten_free"
                        },
                        new
                        {
                            HealthTagId = 20,
                            Description = "Free from dairy and lactose, Applicable To People with lactose intolerance",
                            HealthTagName = "is_dairy_free"
                        },
                        new
                        {
                            HealthTagId = 21,
                            Description = "Free from lactose, Applicable To People experiencing bloating or diarrhea from lactose",
                            HealthTagName = "is_lactose_free"
                        },
                        new
                        {
                            HealthTagId = 22,
                            Description = "Free from common allergens, Applicable To People with multiple food allergies",
                            HealthTagName = "is_allergen_free"
                        },
                        new
                        {
                            HealthTagId = 23,
                            Description = "Reduces inflammation, Applicable To People with chronic inflammatory conditions",
                            HealthTagName = "is_anti_inflammatory"
                        },
                        new
                        {
                            HealthTagId = 24,
                            Description = "Keto-compliant (low-carb, high-fat), Applicable To People on keto or low-carb diets",
                            HealthTagName = "is_keto"
                        },
                        new
                        {
                            HealthTagId = 25,
                            Description = "Paleo-compliant (no refined foods), Applicable To People who prefer natural, clean eating",
                            HealthTagName = "is_paleo"
                        },
                        new
                        {
                            HealthTagId = 26,
                            Description = "Low FODMAP, Applicable To People with IBS or sensitive digestion",
                            HealthTagName = "is_fodmap_friendly"
                        },
                        new
                        {
                            HealthTagId = 27,
                            Description = "Boosts immune system, Applicable To People recovering from illness or surgery",
                            HealthTagName = "is_immune_boosting"
                        },
                        new
                        {
                            HealthTagId = 28,
                            Description = "Rich in calcium/vitamin D, Applicable To Elderly individuals, those with osteoporosis",
                            HealthTagName = "is_bone_strengthening"
                        },
                        new
                        {
                            HealthTagId = 29,
                            Description = "Good for skin (vitamin E, A, zinc, etc.), Applicable To People with acne or dry skin",
                            HealthTagName = "is_skin_health"
                        },
                        new
                        {
                            HealthTagId = 30,
                            Description = "Rich in lutein, vitamin A, Applicable To Screen workers, elderly individuals",
                            HealthTagName = "is_eye_health"
                        },
                        new
                        {
                            HealthTagId = 31,
                            Description = "Helps improve mood, Applicable To People under stress or with mild depression",
                            HealthTagName = "is_mood_boosting"
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.IngredientTypes", b =>
                {
                    b.Property<int>("IngredientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IngredientTypeId"));

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("IngredientTypeId");

                    b.ToTable("IngredientTypes");

                    b.HasData(
                        new
                        {
                            IngredientTypeId = 1,
                            TypeName = "Meat & Seafood"
                        },
                        new
                        {
                            IngredientTypeId = 2,
                            TypeName = "Vegetables"
                        },
                        new
                        {
                            IngredientTypeId = 3,
                            TypeName = "Mushrooms"
                        },
                        new
                        {
                            IngredientTypeId = 4,
                            TypeName = "Eggs & Dairy"
                        },
                        new
                        {
                            IngredientTypeId = 5,
                            TypeName = "Fruits"
                        },
                        new
                        {
                            IngredientTypeId = 6,
                            TypeName = "Carbs & Grains"
                        },
                        new
                        {
                            IngredientTypeId = 7,
                            TypeName = "Legumes"
                        },
                        new
                        {
                            IngredientTypeId = 8,
                            TypeName = "Spices"
                        },
                        new
                        {
                            IngredientTypeId = 9,
                            TypeName = "Flavorings"
                        },
                        new
                        {
                            IngredientTypeId = 10,
                            TypeName = "Fats & Oils"
                        },
                        new
                        {
                            IngredientTypeId = 11,
                            TypeName = "Sweeteners"
                        },
                        new
                        {
                            IngredientTypeId = 12,
                            TypeName = "Fermented Ingredients"
                        },
                        new
                        {
                            IngredientTypeId = 13,
                            TypeName = "Others"
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Ingredients", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IngredientId"));

                    b.Property<double?>("CaloriesPer100g")
                        .HasColumnType("double precision");

                    b.Property<string>("DefaultUnit")
                        .HasColumnType("text");

                    b.Property<double?>("GramPerUnit")
                        .HasColumnType("double precision");

                    b.Property<string>("IconLibrary")
                        .HasColumnType("text");

                    b.Property<string>("IconName")
                        .HasColumnType("text");

                    b.Property<string>("IngredientName")
                        .HasColumnType("text");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("integer");

                    b.HasKey("IngredientId");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("Ingredients", t =>
                        {
                            t.HasCheckConstraint("CK_Ingredients_DefaultUnit", "\"DefaultUnit\" IN ('gram', 'ml', 'piece', 'tbsp', 'tsp')");
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.LoseWeightSpeed", b =>
                {
                    b.Property<int>("SpeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpeedId"));

                    b.Property<string>("SpeedName")
                        .HasColumnType("text");

                    b.Property<string>("TimeToReachGoal")
                        .HasColumnType("text");

                    b.HasKey("SpeedId");

                    b.ToTable("LoseWeightSpeed");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.MealCatagories", b =>
                {
                    b.Property<int>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MealId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MealId");

                    b.ToTable("MealCatagories");

                    b.HasData(
                        new
                        {
                            MealId = 1,
                            Description = "no meat or fish, but may consume eggs and dairy",
                            MealName = "is_vegetarian"
                        },
                        new
                        {
                            MealId = 2,
                            Description = "does not consume any animal products, including dairy, eggs, and honey",
                            MealName = "is_vegan"
                        },
                        new
                        {
                            MealId = 3,
                            Description = "suitable for Muslims: no pork, no alcohol, and meat must be slaughtered according to Islamic law",
                            MealName = "is_halal"
                        },
                        new
                        {
                            MealId = 4,
                            Description = "suitable for Jews: follows Kosher rules, no mixing meat and dairy, only certified meat",
                            MealName = "is_kosher"
                        },
                        new
                        {
                            MealId = 5,
                            Description = "Raw food (consumes only uncooked or minimally heated foods, typically below 42–48°C)",
                            MealName = "is_raw_food"
                        },
                        new
                        {
                            MealId = 6,
                            Description = "no meat, but allows fish and seafood",
                            MealName = "is_pescatarian"
                        },
                        new
                        {
                            MealId = 7,
                            Description = "includes dairy but not eggs",
                            MealName = "is_lacto_vegetarian"
                        },
                        new
                        {
                            MealId = 8,
                            Description = "includes eggs but not dairy",
                            MealName = "is_ovo_vegetarian"
                        },
                        new
                        {
                            MealId = 9,
                            Description = "includes both eggs and dairy",
                            MealName = "is_lacto_ovo_vegetarian"
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.MealScheduled", b =>
                {
                    b.Property<int>("UPId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BreakfastTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DinnerTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LunchTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UPId");

                    b.ToTable("MealScheduled");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.ModifyIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.NotificationUsers", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Notifications", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalHealthConditions", b =>
                {
                    b.Property<int>("UPId")
                        .HasColumnType("integer");

                    b.Property<int>("HealthConditionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ActivityLevelsLevelId")
                        .HasColumnType("integer");

                    b.Property<int?>("HealthConditionsHealthConditionId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("UPId", "HealthConditionId");

                    b.HasIndex("ActivityLevelsLevelId");

                    b.HasIndex("HealthConditionId");

                    b.HasIndex("HealthConditionsHealthConditionId");

                    b.ToTable("PersonalHealthConditions");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalUserCookingSkills", b =>
                {
                    b.Property<int>("UPId")
                        .HasColumnType("integer");

                    b.Property<int>("CookingSkillId")
                        .HasColumnType("integer");

                    b.HasKey("UPId", "CookingSkillId");

                    b.HasIndex("CookingSkillId");

                    b.ToTable("PersonalUserCookingSkills");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalUserProblem", b =>
                {
                    b.Property<int>("UPId")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemId")
                        .HasColumnType("integer");

                    b.HasKey("UPId", "ProblemId");

                    b.HasIndex("ProblemId");

                    b.ToTable("PersonalUserProblem");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.RecipeHealthTags", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<int>("HealthTagId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("RecipeId", "HealthTagId");

                    b.HasIndex("HealthTagId");

                    b.ToTable("RecipeHealthTags");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.RecipeMealTypes", b =>
                {
                    b.Property<int>("MealId")
                        .HasColumnType("integer");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("MealId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeMealTypes");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Recipes", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecipeId"));

                    b.Property<int?>("CuisineId")
                        .HasColumnType("integer");

                    b.Property<int?>("DefaultServing")
                        .HasColumnType("integer");

                    b.Property<double>("DifficultyEstimation")
                        .HasColumnType("double precision");

                    b.Property<string>("InstructionVideoLink")
                        .HasColumnType("text");

                    b.Property<string>("Meals")
                        .HasColumnType("text");

                    b.Property<string>("RecipeName")
                        .HasColumnType("text");

                    b.Property<string>("RecipeSteps")
                        .HasColumnType("text");

                    b.Property<int>("TimeEstimation")
                        .HasColumnType("integer");

                    b.HasKey("RecipeId");

                    b.HasIndex("CuisineId");

                    b.ToTable("Recipes", t =>
                        {
                            t.HasCheckConstraint("CK_Recipes_Difficulty_Rating", "\"DifficultyEstimation\" BETWEEN 1 AND 5");

                            t.HasCheckConstraint("CK_Recipes_Meals", "\"Meals\" IN ('breakfast', 'lunch', 'dinner', 'snack')");
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Servings", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<string>("Ammount")
                        .HasColumnType("text");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Servings");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Subcriptions", b =>
                {
                    b.Property<int>("SubcriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubcriptionId"));

                    b.Property<string>("SubcriptionInfor")
                        .HasColumnType("text");

                    b.Property<string>("SubcriptionName")
                        .HasColumnType("text");

                    b.HasKey("SubcriptionId");

                    b.ToTable("Subcriptions");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserExperiences", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExperienceId"));

                    b.Property<string>("ExperienceName")
                        .HasColumnType("text");

                    b.HasKey("ExperienceId");

                    b.ToTable("UserExperiences");

                    b.HasData(
                        new
                        {
                            ExperienceId = 1,
                            ExperienceName = "Beginner"
                        },
                        new
                        {
                            ExperienceId = 2,
                            ExperienceName = "Intermediate"
                        },
                        new
                        {
                            ExperienceId = 3,
                            ExperienceName = "Advanced"
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserProblem", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProblemId"));

                    b.Property<string>("ProblemName")
                        .HasColumnType("text");

                    b.HasKey("ProblemId");

                    b.ToTable("UserProblem");

                    b.HasData(
                        new
                        {
                            ProblemId = 1,
                            ProblemName = "Lack of motivation"
                        },
                        new
                        {
                            ProblemId = 2,
                            ProblemName = "Weight rebound"
                        },
                        new
                        {
                            ProblemId = 3,
                            ProblemName = "No significant change"
                        },
                        new
                        {
                            ProblemId = 4,
                            ProblemName = "I don't have enough time"
                        },
                        new
                        {
                            ProblemId = 5,
                            ProblemName = "None of the above"
                        });
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserProfiles", b =>
                {
                    b.Property<int>("UPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UPId"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("ExperienceId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<int?>("GoalId")
                        .HasColumnType("integer");

                    b.Property<double?>("GoalWeight")
                        .HasColumnType("double precision");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<int?>("LevelId")
                        .HasColumnType("integer");

                    b.Property<int?>("SpeedId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubcriptionId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPicture")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("UPId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("GoalId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SpeedId");

                    b.HasIndex("SubcriptionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles", t =>
                        {
                            t.HasCheckConstraint("CK_UserProfiles_Gender", "\"Gender\" IN ('Male', 'Female', 'Other')");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Allergies", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.Ingredients", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.Ingredients", null)
                        .WithMany("Allergies")
                        .HasForeignKey("IngredientsIngredientId");

                    b.HasOne("EXE202_BE.Data.Models.UserProfiles", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.UserProfiles", null)
                        .WithMany("Allergies")
                        .HasForeignKey("UserProfilesUPId");

                    b.Navigation("Ingredient");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Devices", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.HealthTagConditions", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.HealthConditions", "HealthCondition")
                        .WithMany("HealthTagConditions")
                        .HasForeignKey("HealthConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.HealthTags", "HealthTag")
                        .WithMany("HealthTagConditions")
                        .HasForeignKey("HealthTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCondition");

                    b.Navigation("HealthTag");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Ingredients", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.IngredientTypes", "IngredientType")
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.MealScheduled", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.UserProfiles", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.NotificationUsers", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.Notifications", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalHealthConditions", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.ActivityLevels", null)
                        .WithMany("PersonalHealthConditions")
                        .HasForeignKey("ActivityLevelsLevelId");

                    b.HasOne("EXE202_BE.Data.Models.HealthConditions", "HealthCondition")
                        .WithMany()
                        .HasForeignKey("HealthConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.HealthConditions", null)
                        .WithMany("PersonalHealthConditions")
                        .HasForeignKey("HealthConditionsHealthConditionId");

                    b.HasOne("EXE202_BE.Data.Models.UserProfiles", "UserProfile")
                        .WithMany("PersonalHealthConditions")
                        .HasForeignKey("UPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCondition");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalUserCookingSkills", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.CookingSkills", "CookingSkill")
                        .WithMany("PersonalUserCookingSkills")
                        .HasForeignKey("CookingSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.UserProfiles", "UserProfile")
                        .WithMany("PersonalUserCookingSkills")
                        .HasForeignKey("UPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CookingSkill");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.PersonalUserProblem", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.UserProblem", "UserProblem")
                        .WithMany("PersonalUserProblems")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.UserProfiles", "UserProfile")
                        .WithMany("PersonalUserProblems")
                        .HasForeignKey("UPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProblem");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.RecipeHealthTags", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.HealthTags", "HealthTag")
                        .WithMany("RecipeHealthTags")
                        .HasForeignKey("HealthTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.Recipes", "Recipe")
                        .WithMany("RecipeHealthTags")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthTag");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.RecipeMealTypes", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.MealCatagories", "MealCatagorie")
                        .WithMany("RecipeMealTypes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.Recipes", "Recipe")
                        .WithMany("RecipeMealTypes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealCatagorie");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Recipes", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.Cuisines", "Cuisine")
                        .WithMany("Recipes")
                        .HasForeignKey("CuisineId");

                    b.Navigation("Cuisine");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Servings", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.Ingredients", "Ingredient")
                        .WithMany("Servings")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.Recipes", "Recipe")
                        .WithMany("Servings")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserProfiles", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.UserExperiences", "UserExperience")
                        .WithMany("UserProfiles")
                        .HasForeignKey("ExperienceId");

                    b.HasOne("EXE202_BE.Data.Models.Goals", "Goal")
                        .WithMany("UserProfiles")
                        .HasForeignKey("GoalId");

                    b.HasOne("EXE202_BE.Data.Models.ActivityLevels", "ActivityLevel")
                        .WithMany("UserProfiles")
                        .HasForeignKey("LevelId");

                    b.HasOne("EXE202_BE.Data.Models.LoseWeightSpeed", "LoseWeightSpeed")
                        .WithMany("UserProfiles")
                        .HasForeignKey("SpeedId");

                    b.HasOne("EXE202_BE.Data.Models.Subcriptions", "Subcription")
                        .WithMany()
                        .HasForeignKey("SubcriptionId");

                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("EXE202_BE.Data.Models.UserProfiles", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityLevel");

                    b.Navigation("Goal");

                    b.Navigation("LoseWeightSpeed");

                    b.Navigation("Subcription");

                    b.Navigation("User");

                    b.Navigation("UserExperience");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EXE202_BE.Data.Models.ModifyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.ActivityLevels", b =>
                {
                    b.Navigation("PersonalHealthConditions");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.CookingSkills", b =>
                {
                    b.Navigation("PersonalUserCookingSkills");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Cuisines", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Goals", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.HealthConditions", b =>
                {
                    b.Navigation("HealthTagConditions");

                    b.Navigation("PersonalHealthConditions");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.HealthTags", b =>
                {
                    b.Navigation("HealthTagConditions");

                    b.Navigation("RecipeHealthTags");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.IngredientTypes", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Ingredients", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Servings");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.LoseWeightSpeed", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.MealCatagories", b =>
                {
                    b.Navigation("RecipeMealTypes");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Notifications", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.Recipes", b =>
                {
                    b.Navigation("RecipeHealthTags");

                    b.Navigation("RecipeMealTypes");

                    b.Navigation("Servings");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserExperiences", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserProblem", b =>
                {
                    b.Navigation("PersonalUserProblems");
                });

            modelBuilder.Entity("EXE202_BE.Data.Models.UserProfiles", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("PersonalHealthConditions");

                    b.Navigation("PersonalUserCookingSkills");

                    b.Navigation("PersonalUserProblems");
                });
#pragma warning restore 612, 618
        }
    }
}
